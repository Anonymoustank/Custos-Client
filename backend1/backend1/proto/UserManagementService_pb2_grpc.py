# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import Group_pb2 as Group__pb2
import UserProfile_pb2 as UserProfile__pb2
from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2


class UserManagementServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateUserProfile = channel.unary_unary(
                '/rpcManagement.UserManagementService/CreateUserProfile',
                request_serializer=UserProfile__pb2.UserProfile.SerializeToString,
                response_deserializer=UserProfile__pb2.UserProfile.FromString,
                )
        self.GetUserProfile = channel.unary_unary(
                '/rpcManagement.UserManagementService/GetUserProfile',
                request_serializer=UserProfile__pb2.UserProfile.SerializeToString,
                response_deserializer=UserProfile__pb2.UserProfile.FromString,
                )
        self.UpdateUserProfile = channel.unary_unary(
                '/rpcManagement.UserManagementService/UpdateUserProfile',
                request_serializer=UserProfile__pb2.UserProfile.SerializeToString,
                response_deserializer=UserProfile__pb2.UserProfile.FromString,
                )
        self.DeleteUserProfile = channel.unary_unary(
                '/rpcManagement.UserManagementService/DeleteUserProfile',
                request_serializer=UserProfile__pb2.UserProfile.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.CreateGroup = channel.unary_unary(
                '/rpcManagement.UserManagementService/CreateGroup',
                request_serializer=Group__pb2.Group.SerializeToString,
                response_deserializer=Group__pb2.Group.FromString,
                )
        self.GetGroup = channel.unary_unary(
                '/rpcManagement.UserManagementService/GetGroup',
                request_serializer=Group__pb2.Group.SerializeToString,
                response_deserializer=Group__pb2.Group.FromString,
                )
        self.UpdateGroup = channel.unary_unary(
                '/rpcManagement.UserManagementService/UpdateGroup',
                request_serializer=Group__pb2.Group.SerializeToString,
                response_deserializer=Group__pb2.Group.FromString,
                )
        self.DeleteGroup = channel.unary_unary(
                '/rpcManagement.UserManagementService/DeleteGroup',
                request_serializer=Group__pb2.Group.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )


class UserManagementServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def CreateUserProfile(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetUserProfile(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateUserProfile(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteUserProfile(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateGroup(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetGroup(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateGroup(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteGroup(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_UserManagementServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateUserProfile': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateUserProfile,
                    request_deserializer=UserProfile__pb2.UserProfile.FromString,
                    response_serializer=UserProfile__pb2.UserProfile.SerializeToString,
            ),
            'GetUserProfile': grpc.unary_unary_rpc_method_handler(
                    servicer.GetUserProfile,
                    request_deserializer=UserProfile__pb2.UserProfile.FromString,
                    response_serializer=UserProfile__pb2.UserProfile.SerializeToString,
            ),
            'UpdateUserProfile': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateUserProfile,
                    request_deserializer=UserProfile__pb2.UserProfile.FromString,
                    response_serializer=UserProfile__pb2.UserProfile.SerializeToString,
            ),
            'DeleteUserProfile': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteUserProfile,
                    request_deserializer=UserProfile__pb2.UserProfile.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'CreateGroup': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateGroup,
                    request_deserializer=Group__pb2.Group.FromString,
                    response_serializer=Group__pb2.Group.SerializeToString,
            ),
            'GetGroup': grpc.unary_unary_rpc_method_handler(
                    servicer.GetGroup,
                    request_deserializer=Group__pb2.Group.FromString,
                    response_serializer=Group__pb2.Group.SerializeToString,
            ),
            'UpdateGroup': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateGroup,
                    request_deserializer=Group__pb2.Group.FromString,
                    response_serializer=Group__pb2.Group.SerializeToString,
            ),
            'DeleteGroup': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteGroup,
                    request_deserializer=Group__pb2.Group.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'rpcManagement.UserManagementService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class UserManagementService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def CreateUserProfile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rpcManagement.UserManagementService/CreateUserProfile',
            UserProfile__pb2.UserProfile.SerializeToString,
            UserProfile__pb2.UserProfile.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetUserProfile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rpcManagement.UserManagementService/GetUserProfile',
            UserProfile__pb2.UserProfile.SerializeToString,
            UserProfile__pb2.UserProfile.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateUserProfile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rpcManagement.UserManagementService/UpdateUserProfile',
            UserProfile__pb2.UserProfile.SerializeToString,
            UserProfile__pb2.UserProfile.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteUserProfile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rpcManagement.UserManagementService/DeleteUserProfile',
            UserProfile__pb2.UserProfile.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateGroup(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rpcManagement.UserManagementService/CreateGroup',
            Group__pb2.Group.SerializeToString,
            Group__pb2.Group.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetGroup(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rpcManagement.UserManagementService/GetGroup',
            Group__pb2.Group.SerializeToString,
            Group__pb2.Group.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateGroup(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rpcManagement.UserManagementService/UpdateGroup',
            Group__pb2.Group.SerializeToString,
            Group__pb2.Group.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteGroup(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rpcManagement.UserManagementService/DeleteGroup',
            Group__pb2.Group.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
